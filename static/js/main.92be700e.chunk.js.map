{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","endsWithOperator","endsWithEqualSign","endsWithdot","containsDot","useState","inpNum","setInpNum","output","setOutput","allClear","handleClick","e","test","target","value","includes","prev","slice","length","setTimeout","evaluate","answer","Math","round","eval","className","id","onClick","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92be700e.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState } from 'react';\r\n\r\n\r\nconst App = () => {\r\n\r\n  const endsWithOperator = /[*/+-]$/;\r\n  const endsWithEqualSign = /[=]$/;\r\n  const endsWithdot = /[.]$/;\r\n  const containsDot = /\\d\\.\\d/;\r\n\r\n  const [inpNum, setInpNum] = useState('');\r\n  const [output, setOutput] = useState('');\r\n\r\n\r\n  const allClear = () => {\r\n    setOutput('');\r\n    setInpNum('');\r\n  }\r\n\r\n  const handleClick = (e) => {\r\n\r\n    // prevent the usage of consecutive and non-consecutive decimal points\r\n    if (endsWithdot.test(output) && e.target.value === '.') {\r\n      return null\r\n    }\r\n\r\n    // prevent the usage of non-consecutive decimal points\r\n    else if (containsDot.test(inpNum) && e.target.value === '.') {\r\n      return null;\r\n    }\r\n\r\n    // prevent concatination of consecutive operators\r\n    else if (['+', '-', '*', '/'].includes(e.target.value)) {\r\n      setInpNum('');\r\n\r\n      if (endsWithOperator.test(output)) {\r\n\r\n        // did not choose return null to give user opportunity to change operator\r\n        setOutput(prev => prev.slice(0,-1) + e.target.value)\r\n      } \r\n\r\n      /* this will allow the user to perform more calculations after evaluating a previous expression */\r\n      else if (endsWithEqualSign.test(output) && ['+', '-', '*', '/'].includes(e.target.value)) {\r\n        setOutput(inpNum + e.target.value)\r\n        setInpNum('')\r\n      }\r\n\r\n      // this will concatinate the newly selected to the output\r\n      else {\r\n        setOutput(prev => prev + e.target.value)\r\n      }\r\n    } \r\n\r\n    /* this will allow the user to perform more calculations after evaluating a previous expression */\r\n    else if (endsWithEqualSign.test(output) && !['+', '-', '*', '/'].includes(e.target.value)) {\r\n      setInpNum(e.target.value)\r\n      setOutput(e.target.value)\r\n    }\r\n\r\n    else if (inpNum.length > 10) {\r\n      setTimeout(() => { \r\n        setInpNum('10 digits only!') \r\n      }, 1000);\r\n    } \r\n    \r\n    // preventing user from start wit 0 first (last condition allow user to start with 0 if number is less than one)\r\n    else if (e.target.value === '0' && (inpNum === '' || inpNum === '0') && !endsWithOperator.test(output)) {\r\n      setInpNum(e.target.value)\r\n      setOutput(e.target.value)\r\n    }\r\n\r\n    else {\r\n      setInpNum(prev => prev + e.target.value);\r\n      setOutput(prev => prev + e.target.value)\r\n    }\r\n  }\r\n  \r\n  const evaluate = (e) => {\r\n    let answer;\r\n    try {\r\n      answer = Math.round(eval(output) * 1000000000000) / 1000000000000;\r\n\r\n      // the inpNum is going to display the answer while the ouptput displays the mathematical expression\r\n      setInpNum(answer);\r\n      setOutput(prev => prev + e.target.value);\r\n    } catch {\r\n      setOutput('SYNTAX ERROR!');\r\n      setTimeout(() => {\r\n        setInpNum('');\r\n        setOutput('');\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <div id=\"calculator\">\r\n\r\n        <div className=\"display\">\r\n          <div id=\"output\">{output}</div>\r\n          <div id=\"display\" className=\"input\">{inpNum || output ? inpNum : 0}</div>\r\n        </div>\r\n\r\n        <div id=\"calculator-buttons\">\r\n          <button onClick={allClear} className=\"btn\" id=\"clear\" value=\"AC\">AC</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"openBracket\" value=\"(\">(</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"closeBracket\" value=\")\">)</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"seven\" value=\"7\">7</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"eight\" value=\"8\">8</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"nine\" value=\"9\">9</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"multiply\" value=\"*\">x</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"four\" value=\"4\">4</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"five\" value=\"5\">5</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"six\" value=\"6\">6</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"divide\" value=\"/\">/</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"one\" value=\"1\">1</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"two\" value=\"2\">2</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"three\" value=\"3\">3</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"subtract\" value=\"-\">â€‘</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"zero\" value=\"0\">0</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"decimal\" value=\".\">.</button>\r\n          <button onClick={evaluate} className=\"btn\" id=\"equals\" value=\"=\" >=</button>\r\n          <button onClick={handleClick} className=\"btn\" id=\"add\" value=\"+\">+</button>\r\n        </div>\r\n      </div>\r\n      <div className='info'>\r\n        <h1>Built by <span>Haitham Khadra</span></h1>\r\n        <a rel=\"noreferrer\" href='https://github.com/HaithamKhadra' target=\"_blank\">Source Code</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}